// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package item

import (
	"github.com/jmoiron/sqlx"
	itemModel "github.com/stevenkie/project-test/internal/model/item"
	"github.com/stevenkie/project-test/util"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetDBFunc: func() *sqlx.DB {
// 				panic("mock out the GetDB method")
// 			},
// 			GetItemByIDsFunc: func(itemIDs []string) ([]itemModel.Item, error) {
// 				panic("mock out the GetItemByIDs method")
// 			},
// 			ReduceItemStockFunc: func(tx util.Transaction, itemID string, qty int32) error {
// 				panic("mock out the ReduceItemStock method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetDBFunc mocks the GetDB method.
	GetDBFunc func() *sqlx.DB

	// GetItemByIDsFunc mocks the GetItemByIDs method.
	GetItemByIDsFunc func(itemIDs []string) ([]itemModel.Item, error)

	// ReduceItemStockFunc mocks the ReduceItemStock method.
	ReduceItemStockFunc func(tx util.Transaction, itemID string, qty int32) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDB holds details about calls to the GetDB method.
		GetDB []struct {
		}
		// GetItemByIDs holds details about calls to the GetItemByIDs method.
		GetItemByIDs []struct {
			// ItemIDs is the itemIDs argument value.
			ItemIDs []string
		}
		// ReduceItemStock holds details about calls to the ReduceItemStock method.
		ReduceItemStock []struct {
			// Tx is the tx argument value.
			Tx util.Transaction
			// ItemID is the itemID argument value.
			ItemID string
			// Qty is the qty argument value.
			Qty int32
		}
	}
	lockGetDB           sync.RWMutex
	lockGetItemByIDs    sync.RWMutex
	lockReduceItemStock sync.RWMutex
}

// GetDB calls GetDBFunc.
func (mock *RepositoryMock) GetDB() *sqlx.DB {
	if mock.GetDBFunc == nil {
		panic("RepositoryMock.GetDBFunc: method is nil but Repository.GetDB was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDB.Lock()
	mock.calls.GetDB = append(mock.calls.GetDB, callInfo)
	mock.lockGetDB.Unlock()
	return mock.GetDBFunc()
}

// GetDBCalls gets all the calls that were made to GetDB.
// Check the length with:
//     len(mockedRepository.GetDBCalls())
func (mock *RepositoryMock) GetDBCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDB.RLock()
	calls = mock.calls.GetDB
	mock.lockGetDB.RUnlock()
	return calls
}

// GetItemByIDs calls GetItemByIDsFunc.
func (mock *RepositoryMock) GetItemByIDs(itemIDs []string) ([]itemModel.Item, error) {
	if mock.GetItemByIDsFunc == nil {
		panic("RepositoryMock.GetItemByIDsFunc: method is nil but Repository.GetItemByIDs was just called")
	}
	callInfo := struct {
		ItemIDs []string
	}{
		ItemIDs: itemIDs,
	}
	mock.lockGetItemByIDs.Lock()
	mock.calls.GetItemByIDs = append(mock.calls.GetItemByIDs, callInfo)
	mock.lockGetItemByIDs.Unlock()
	return mock.GetItemByIDsFunc(itemIDs)
}

// GetItemByIDsCalls gets all the calls that were made to GetItemByIDs.
// Check the length with:
//     len(mockedRepository.GetItemByIDsCalls())
func (mock *RepositoryMock) GetItemByIDsCalls() []struct {
	ItemIDs []string
} {
	var calls []struct {
		ItemIDs []string
	}
	mock.lockGetItemByIDs.RLock()
	calls = mock.calls.GetItemByIDs
	mock.lockGetItemByIDs.RUnlock()
	return calls
}

// ReduceItemStock calls ReduceItemStockFunc.
func (mock *RepositoryMock) ReduceItemStock(tx util.Transaction, itemID string, qty int32) error {
	if mock.ReduceItemStockFunc == nil {
		panic("RepositoryMock.ReduceItemStockFunc: method is nil but Repository.ReduceItemStock was just called")
	}
	callInfo := struct {
		Tx     util.Transaction
		ItemID string
		Qty    int32
	}{
		Tx:     tx,
		ItemID: itemID,
		Qty:    qty,
	}
	mock.lockReduceItemStock.Lock()
	mock.calls.ReduceItemStock = append(mock.calls.ReduceItemStock, callInfo)
	mock.lockReduceItemStock.Unlock()
	return mock.ReduceItemStockFunc(tx, itemID, qty)
}

// ReduceItemStockCalls gets all the calls that were made to ReduceItemStock.
// Check the length with:
//     len(mockedRepository.ReduceItemStockCalls())
func (mock *RepositoryMock) ReduceItemStockCalls() []struct {
	Tx     util.Transaction
	ItemID string
	Qty    int32
} {
	var calls []struct {
		Tx     util.Transaction
		ItemID string
		Qty    int32
	}
	mock.lockReduceItemStock.RLock()
	calls = mock.calls.ReduceItemStock
	mock.lockReduceItemStock.RUnlock()
	return calls
}
