// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package session

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetTokenFunc: func(token string) (string, error) {
// 				panic("mock out the GetToken method")
// 			},
// 			SetUserTokenFunc: func(userID string, token string) error {
// 				panic("mock out the SetUserToken method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetTokenFunc mocks the GetToken method.
	GetTokenFunc func(token string) (string, error)

	// SetUserTokenFunc mocks the SetUserToken method.
	SetUserTokenFunc func(userID string, token string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetToken holds details about calls to the GetToken method.
		GetToken []struct {
			// Token is the token argument value.
			Token string
		}
		// SetUserToken holds details about calls to the SetUserToken method.
		SetUserToken []struct {
			// UserID is the userID argument value.
			UserID string
			// Token is the token argument value.
			Token string
		}
	}
	lockGetToken     sync.RWMutex
	lockSetUserToken sync.RWMutex
}

// GetToken calls GetTokenFunc.
func (mock *RepositoryMock) GetToken(token string) (string, error) {
	if mock.GetTokenFunc == nil {
		panic("RepositoryMock.GetTokenFunc: method is nil but Repository.GetToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockGetToken.Lock()
	mock.calls.GetToken = append(mock.calls.GetToken, callInfo)
	mock.lockGetToken.Unlock()
	return mock.GetTokenFunc(token)
}

// GetTokenCalls gets all the calls that were made to GetToken.
// Check the length with:
//     len(mockedRepository.GetTokenCalls())
func (mock *RepositoryMock) GetTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockGetToken.RLock()
	calls = mock.calls.GetToken
	mock.lockGetToken.RUnlock()
	return calls
}

// SetUserToken calls SetUserTokenFunc.
func (mock *RepositoryMock) SetUserToken(userID string, token string) error {
	if mock.SetUserTokenFunc == nil {
		panic("RepositoryMock.SetUserTokenFunc: method is nil but Repository.SetUserToken was just called")
	}
	callInfo := struct {
		UserID string
		Token  string
	}{
		UserID: userID,
		Token:  token,
	}
	mock.lockSetUserToken.Lock()
	mock.calls.SetUserToken = append(mock.calls.SetUserToken, callInfo)
	mock.lockSetUserToken.Unlock()
	return mock.SetUserTokenFunc(userID, token)
}

// SetUserTokenCalls gets all the calls that were made to SetUserToken.
// Check the length with:
//     len(mockedRepository.SetUserTokenCalls())
func (mock *RepositoryMock) SetUserTokenCalls() []struct {
	UserID string
	Token  string
} {
	var calls []struct {
		UserID string
		Token  string
	}
	mock.lockSetUserToken.RLock()
	calls = mock.calls.SetUserToken
	mock.lockSetUserToken.RUnlock()
	return calls
}
