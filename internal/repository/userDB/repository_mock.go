// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userdb

import (
	"github.com/jmoiron/sqlx"
	userModel "github.com/stevenkie/project-test/internal/model/user"
	"github.com/stevenkie/project-test/util"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			DeleteUserFunc: func(tx util.Transaction, userID string) error {
// 				panic("mock out the DeleteUser method")
// 			},
// 			GetDBFunc: func() *sqlx.DB {
// 				panic("mock out the GetDB method")
// 			},
// 			GetUserByEmailFunc: func(email string) (userModel.User, error) {
// 				panic("mock out the GetUserByEmail method")
// 			},
// 			GetUserByIDFunc: func(userID string) (userModel.User, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			InsertUserFunc: func(tx util.Transaction, data userModel.InsertUser) error {
// 				panic("mock out the InsertUser method")
// 			},
// 			UpdateUserFunc: func(tx util.Transaction, data userModel.UpdateUser) error {
// 				panic("mock out the UpdateUser method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(tx util.Transaction, userID string) error

	// GetDBFunc mocks the GetDB method.
	GetDBFunc func() *sqlx.DB

	// GetUserByEmailFunc mocks the GetUserByEmail method.
	GetUserByEmailFunc func(email string) (userModel.User, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(userID string) (userModel.User, error)

	// InsertUserFunc mocks the InsertUser method.
	InsertUserFunc func(tx util.Transaction, data userModel.InsertUser) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(tx util.Transaction, data userModel.UpdateUser) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Tx is the tx argument value.
			Tx util.Transaction
			// UserID is the userID argument value.
			UserID string
		}
		// GetDB holds details about calls to the GetDB method.
		GetDB []struct {
		}
		// GetUserByEmail holds details about calls to the GetUserByEmail method.
		GetUserByEmail []struct {
			// Email is the email argument value.
			Email string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// InsertUser holds details about calls to the InsertUser method.
		InsertUser []struct {
			// Tx is the tx argument value.
			Tx util.Transaction
			// Data is the data argument value.
			Data userModel.InsertUser
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Tx is the tx argument value.
			Tx util.Transaction
			// Data is the data argument value.
			Data userModel.UpdateUser
		}
	}
	lockDeleteUser     sync.RWMutex
	lockGetDB          sync.RWMutex
	lockGetUserByEmail sync.RWMutex
	lockGetUserByID    sync.RWMutex
	lockInsertUser     sync.RWMutex
	lockUpdateUser     sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *RepositoryMock) DeleteUser(tx util.Transaction, userID string) error {
	if mock.DeleteUserFunc == nil {
		panic("RepositoryMock.DeleteUserFunc: method is nil but Repository.DeleteUser was just called")
	}
	callInfo := struct {
		Tx     util.Transaction
		UserID string
	}{
		Tx:     tx,
		UserID: userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(tx, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedRepository.DeleteUserCalls())
func (mock *RepositoryMock) DeleteUserCalls() []struct {
	Tx     util.Transaction
	UserID string
} {
	var calls []struct {
		Tx     util.Transaction
		UserID string
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetDB calls GetDBFunc.
func (mock *RepositoryMock) GetDB() *sqlx.DB {
	if mock.GetDBFunc == nil {
		panic("RepositoryMock.GetDBFunc: method is nil but Repository.GetDB was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDB.Lock()
	mock.calls.GetDB = append(mock.calls.GetDB, callInfo)
	mock.lockGetDB.Unlock()
	return mock.GetDBFunc()
}

// GetDBCalls gets all the calls that were made to GetDB.
// Check the length with:
//     len(mockedRepository.GetDBCalls())
func (mock *RepositoryMock) GetDBCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDB.RLock()
	calls = mock.calls.GetDB
	mock.lockGetDB.RUnlock()
	return calls
}

// GetUserByEmail calls GetUserByEmailFunc.
func (mock *RepositoryMock) GetUserByEmail(email string) (userModel.User, error) {
	if mock.GetUserByEmailFunc == nil {
		panic("RepositoryMock.GetUserByEmailFunc: method is nil but Repository.GetUserByEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	mock.lockGetUserByEmail.Lock()
	mock.calls.GetUserByEmail = append(mock.calls.GetUserByEmail, callInfo)
	mock.lockGetUserByEmail.Unlock()
	return mock.GetUserByEmailFunc(email)
}

// GetUserByEmailCalls gets all the calls that were made to GetUserByEmail.
// Check the length with:
//     len(mockedRepository.GetUserByEmailCalls())
func (mock *RepositoryMock) GetUserByEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	mock.lockGetUserByEmail.RLock()
	calls = mock.calls.GetUserByEmail
	mock.lockGetUserByEmail.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *RepositoryMock) GetUserByID(userID string) (userModel.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("RepositoryMock.GetUserByIDFunc: method is nil but Repository.GetUserByID was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedRepository.GetUserByIDCalls())
func (mock *RepositoryMock) GetUserByIDCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// InsertUser calls InsertUserFunc.
func (mock *RepositoryMock) InsertUser(tx util.Transaction, data userModel.InsertUser) error {
	if mock.InsertUserFunc == nil {
		panic("RepositoryMock.InsertUserFunc: method is nil but Repository.InsertUser was just called")
	}
	callInfo := struct {
		Tx   util.Transaction
		Data userModel.InsertUser
	}{
		Tx:   tx,
		Data: data,
	}
	mock.lockInsertUser.Lock()
	mock.calls.InsertUser = append(mock.calls.InsertUser, callInfo)
	mock.lockInsertUser.Unlock()
	return mock.InsertUserFunc(tx, data)
}

// InsertUserCalls gets all the calls that were made to InsertUser.
// Check the length with:
//     len(mockedRepository.InsertUserCalls())
func (mock *RepositoryMock) InsertUserCalls() []struct {
	Tx   util.Transaction
	Data userModel.InsertUser
} {
	var calls []struct {
		Tx   util.Transaction
		Data userModel.InsertUser
	}
	mock.lockInsertUser.RLock()
	calls = mock.calls.InsertUser
	mock.lockInsertUser.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *RepositoryMock) UpdateUser(tx util.Transaction, data userModel.UpdateUser) error {
	if mock.UpdateUserFunc == nil {
		panic("RepositoryMock.UpdateUserFunc: method is nil but Repository.UpdateUser was just called")
	}
	callInfo := struct {
		Tx   util.Transaction
		Data userModel.UpdateUser
	}{
		Tx:   tx,
		Data: data,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(tx, data)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedRepository.UpdateUserCalls())
func (mock *RepositoryMock) UpdateUserCalls() []struct {
	Tx   util.Transaction
	Data userModel.UpdateUser
} {
	var calls []struct {
		Tx   util.Transaction
		Data userModel.UpdateUser
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
