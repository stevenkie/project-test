// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package util

import (
	"database/sql"
	"sync"
)

// Ensure, that TransactionMock does implement Transaction.
// If this is not the case, regenerate this file with moq.
var _ Transaction = &TransactionMock{}

// TransactionMock is a mock implementation of Transaction.
//
// 	func TestSomethingThatUsesTransaction(t *testing.T) {
//
// 		// make and configure a mocked Transaction
// 		mockedTransaction := &TransactionMock{
// 			ExecFunc: func(query string, args ...interface{}) (sql.Result, error) {
// 				panic("mock out the Exec method")
// 			},
// 		}
//
// 		// use mockedTransaction in code that requires Transaction
// 		// and then make assertions.
//
// 	}
type TransactionMock struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(query string, args ...interface{}) (sql.Result, error)

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockExec sync.RWMutex
}

// Exec calls ExecFunc.
func (mock *TransactionMock) Exec(query string, args ...interface{}) (sql.Result, error) {
	if mock.ExecFunc == nil {
		panic("TransactionMock.ExecFunc: method is nil but Transaction.Exec was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(query, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedTransaction.ExecCalls())
func (mock *TransactionMock) ExecCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}
